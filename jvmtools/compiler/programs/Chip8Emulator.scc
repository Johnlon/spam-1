


program {

// Consider psuedo random using .. https://codebase64.org/doku.php?id=base:16bit_xorshift_random_generator
    fun main() {

        short SCREEN_BUF_BOT = $F00;
        short SCREEN_BUF_TOP = $FFF;

        short FONT_ADDR = $50;
        short PC_INIT = $200;

        short GOTO_INIT_STATE = 0;
        short GOTO_SETX_STATE = 1;  // switch state
        short GOTO_SETY_STATE = 2;  // switch state
        short GOTO_DRAW_PIXEL_STATE = 3; // switch state
        short GOTO_DRAW_BYTE_STATE = 4; // switch state
        short GOTO_LOG_CHAR_STATE = 5; // switch state
        short GOTO_LOG_BYTE_STATE = 6; // switch state
        short DO_CLEAR = 8;
        short DO_UP = 11;
        short DO_DOWN = 12;
        short DO_LEFT = 13;
        short DO_RIGHT = 14;
        short DO_ORIGIN = 15;
        short DO_CENTRE = 16;
        short GOTO_LOG_OPCODE = 17;
        short GOTO_LOG_STRING = 18;

        short SCREEN_HEIGHT = 32;
        short SCREEN_WIDTH = 64;

        // 32*64=screen size - each mem location represents a pixel
        // = [ datasource ]
        // = an array that is 0-2048 index where the byte at 2048 is 0
        var screen = [32 * 64: [0]];

        // 16 x 8 bits
        // = an array of 0 to 16 where byte 16 is 0
        var registers = [16: [0]];

        // "schip" flags registers / also documented as "RPL  user flags"
        var rplUserFlags = [16: [0]];

        // 16 x 2 bytes - two per locn
        var stack = [32: [0]];

        short FontMemAddress = $50;
        short FontCharWidth = 5;

        var memory = [
                // fonts : 10 rows = 10 digits, each row of 5 bytes defines the 5 rows of 8 pixels wide
                $50  : [
                        $F0 $90 $90 $90 $F0
                        $20 $60 $20 $20 $70
                        $F0 $10 $F0 $80 $F0
                        $F0 $10 $F0 $10 $F0
                        $90 $90 $F0 $10 $10
                        $F0 $80 $F0 $10 $F0
                        $F0 $80 $F0 $90 $F0
                        $F0 $10 $20 $40 $40
                        $F0 $90 $F0 $90 $F0
                        $F0 $90 $F0 $10 $F0
                        $F0 $90 $F0 $90 $90
                        $E0 $90 $E0 $90 $E0
                        $F0 $80 $80 $80 $F0
                        $E0 $90 $90 $90 $E0
                        $F0 $80 $F0 $80 $F0
                        $F0 $80 $F0 $80 $80
                ]

                // program
                // $200 : [file("/home/john/OneDrive/github/johnlon/chip-8/src/main/resources/chip8/roms/IBM_Logo.ch8")]
                //$200 : [hexfile(systemProp("CHIP8_FILENAME"))]
                $200 : [file(systemProp("CHIP8_FILENAME"))]

                // reserve 4k memory - put a zero explicitly at posn - this has same effect as as "$FFF=[]"
                $0FFF: [0] // 4k - no need to populate with zeros - compiler will fill gaps if needed

                // TODO PROGRAM WOULD BE SMALLER AND START QUICKER IF COMPILER DIDNT INITIALISE WITH 0
        ];

        short pc = PC_INIT;
        short index = 0;
        short stackPtr = 0;
        short countI = 0;

        // reset by sending this twice
        putuart(GOTO_INIT_STATE)
        putuart(GOTO_INIT_STATE)

        putuart(GOTO_LOG_STRING)
        putuart(3)
        putuart('G')
        putuart('O')
        putuart('\n')

        short keyDown = $100; // 32 = no key pressed
        short DT = 0;

        short hackCount = 0;
        short LOG = 0;
        
        while (true) {
            putuart(GOTO_INIT_STATE)
            putuart(GOTO_INIT_STATE)

            countI = countI + 1;

            short opcodehi = memory[pc];
            short opcodelo = memory[pc + 1];
            short opcode = (opcodehi << 8) + opcodelo;

            short control = readport(Gamepad1);
            if (control == 0) {
                keyDown = $100; // no key pressed
            } else if (control == 1) { // nes-up=1
                keyDown = 4; // rotate left
            } else if (control == 2) { // nes-dn=2
                keyDown = 1; // drop
            } else if (control == 4) { // nes-left=4
                keyDown = 5; // left
            } else if (control == 8) { // nes-right=8
                keyDown = 6; // right
            } else if (control == 16) { // nes-space=16
                keyDown = 1; // drop
            } else {
                keyDown = 0;
            }


/*
            short keyLast = getuart(); // no key = x100 otherwise 0-255
            if (keyLast == $100) {
                // no change
            } else if (keyLast == 32) {
                keyDown = $100; // no key pressed
            } else {
                keyDown = keyLast;
            }
*/



            putfuart(X, countI>>8)
            putfuart(X, countI)
            putfuart(C, ':')
            putfuart(C, 32)
            putfuart(X, pc >> 8)
            putfuart(X, pc)
            putfuart(C, ':')
            putfuart(C, 32)
            putfuart(X, opcodehi)
            putfuart(X, opcodelo)

            if (LOG == 1) {
                putfuart(C, 32)

                putfuart(C, 'K')
                putfuart(C, ':')
                putfuart(X, keyDown >> 8)
                putfuart(X, keyDown)
                putfuart(C, 32)

                putfuart(C, 'I')
                putfuart(C, ':')
                putfuart(X, index >> 8)
                putfuart(X, index)
                putfuart(C, 32)

                putfuart(C, 'D')
                putfuart(C, ':')
                putfuart(X, DT)
                putfuart(C, 32)

                putfuart(C, '0')
                putfuart(C, ':')
                putfuart(X, registers[0])
                putfuart(C, 32)
                putfuart(C, '1')
                putfuart(C, ':')
                putfuart(X, registers[1])
                putfuart(C, 32)
                putfuart(C, '2')
                putfuart(C, ':')
                putfuart(X, registers[2])
                putfuart(C, 32)
                putfuart(C, '3')
                putfuart(C, ':')
                putfuart(X, registers[3])
                putfuart(C, 32)
                putfuart(C, '4')
                putfuart(C, ':')
                putfuart(X, registers[4])
                putfuart(C, 32)
                putfuart(C, '5')
                putfuart(C, ':')
                putfuart(X, registers[5])
                putfuart(C, 32)
                putfuart(C, '6')
                putfuart(C, ':')
                putfuart(X, registers[6])
                putfuart(C, 32)
                putfuart(C, '7')
                putfuart(C, ':')
                putfuart(X, registers[7])
                putfuart(C, 32)
                putfuart(C, '8')
                putfuart(C, ':')
                putfuart(X, registers[8])
                putfuart(C, 32)
                putfuart(C, '9')
                putfuart(C, ':')
                putfuart(X, registers[9])
                putfuart(C, 32)
                putfuart(C, 'A')
                putfuart(C, ':')
                putfuart(X, registers[10])
                putfuart(C, 32)
                putfuart(C, 'B')
                putfuart(C, ':')
                putfuart(X, registers[11])
                putfuart(C, 32)
                putfuart(C, 'C')
                putfuart(C, ':')
                putfuart(X, registers[12])
                putfuart(C, 32)
                putfuart(C, 'D')
                putfuart(C, ':')
                putfuart(X, registers[13])
                putfuart(C, 32)
                putfuart(C, 'E')
                putfuart(C, ':')
                putfuart(X, registers[14])
                putfuart(C, 32)
                putfuart(C, 'F')
                putfuart(C, ':')
                putfuart(X, registers[15])
                putfuart(C, 32)

            }

            short N___ = opcode & $f000;
            short _NNN = opcode & $0fff;
            short _X__ = opcodehi & $0f;
            short __Y_ = opcodelo >> 4;
            short __NN = opcodelo;
            short ___N = opcodelo & $0f;

            short x = registers[_X__];
            short y = registers[__Y_];

            if (opcode == $00e0) {
                // draw
                putuart(DO_CLEAR)
                if (LOG == 1) {
                    putfuart(C, 'C')
                    putfuart(C, 'L')
                    putfuart(C, 'S')
                }
            } else if (opcode == $00ee) { // DONE
                // ReturnSub
                // return by pulling address off stack
                stackPtr = stackPtr - 1;
                short addrLo = stack[stackPtr];
                stackPtr = stackPtr - 1;
                short addrHi = stack[stackPtr];
                pc = (addrHi << 8) + addrLo;
                if (LOG == 1) {
                    putfuart(C, 'R')
                    putfuart(C, 'T')
                    putfuart(C, 'S')
                }
            } else if (opcodehi == $00) {
                // obsolete machine jump
                if (LOG == 1) {
                    putfuart(C, 'O')
                    putfuart(C, 'B')
                    putfuart(C, 'S')
                }
            } else if (N___ == $1000) {  // DONE
                // jump to nnn
                pc = _NNN - 2; // subtract 2 as there is an auto increment at end of loop
                if (LOG == 1) {
                    putfuart(C, 'J')
                    putfuart(C, 'M')
                    putfuart(C, 'P')
                    putfuart(C, 32)
                    putfuart(X, _NNN >> 8)
                    putfuart(X, _NNN)
                }
            } else if (N___ == $2000) {  // DONE
                if (LOG == 1) {
                    putfuart(C, 'C')
                    putfuart(C, 'A')
                    putfuart(C, 'L')
                    putfuart(C, 'L')
                    putfuart(C, 32)
                    putfuart(X, _NNN >> 8)
                    putfuart(X, _NNN)
                }
                // CALL _NNN
                // tested using test_opcode.ch8

                // store into stack
                stack[stackPtr] = pc >> 8;
                stackPtr = stackPtr + 1;
                stack[stackPtr] = pc & $ff;
                stackPtr = stackPtr + 1;

                // do jump
                pc = _NNN - 2;

            } else if (N___ == $3000) {  // DONE
                // skip if X eq N
                if (LOG == 1) {
                    putfuart(C, 'S')
                    putfuart(C, 'K')
                    putfuart(C, 'I')
                    putfuart(C, 'P')
                    putfuart(C, 32)
                    putfuart(C, 'V')
                    putfuart(X, _X__)
                    putfuart(C, '=')
                    putfuart(C, 'N')
                    putfuart(C, 32)
                    putfuart(X, x)
                    putfuart(C, '=')
                    putfuart(X, __NN)
                }

                if (x == __NN) {
                    pc = pc + 2;
                }

            } else if (N___ == $4000) {  // DONE
                // skip if X ne N
                if (LOG == 1) {
                    putfuart(C, 'S')
                    putfuart(C, 'K')
                    putfuart(C, 'I')
                    putfuart(C, 'P')
                    putfuart(C, 32)
                    putfuart(C, 'V')
                    putfuart(X, _X__)
                    putfuart(C, '!')
                    putfuart(C, '=')
                    putfuart(C, 'N')
                    putfuart(C, 32)
                    putfuart(X, x)
                    putfuart(C, '!')
                    putfuart(C, '=')
                    putfuart(X, __NN)
                }
                if (x != __NN) {
                    pc = pc + 2;
                }
            } else if (N___ == $5000) {  // DONE
                // skip if X eq Y
                if (LOG == 1) {
                    putfuart(C, 'S')
                    putfuart(C, 'K')
                    putfuart(C, 'I')
                    putfuart(C, 'P')
                    putfuart(C, 32)
                    putfuart(C, 'V')
                    putfuart(X, _X__)
                    putfuart(C, '=')
                    putfuart(C, 'V')
                    putfuart(X, __Y_)
                    putfuart(C, 32)
                    putfuart(X, x)
                    putfuart(C, '=')
                    putfuart(X, y)
                }
                if (___N != 0) {
                    // _X__ and __Y_ are only factors to this op and so ___N ought to be unused and 0
// not meaningful as fars as I know to have a non zero as ___N but we'll ignore it
                    halt(opcode, 1)
                    //halt(pc, 1)
                }
                if (x == y) {
                    pc = pc + 2;
                }

            } else if (N___ == $6000) { // DONE
                // VX=__NN
                registers[_X__] = __NN;
                if (LOG == 1) {
                    putfuart(C, 'V')
                    putfuart(X, _X__)
                    putfuart(C, '=')
                    putfuart(X, __NN)
                }

            } else if (N___ == $7000) { // DONE
                // VX=VX+__NN
                registers[_X__] = x + __NN;
                if (LOG == 1) {
                    putfuart(C, 'V')
                    putfuart(X, _X__)
                    putfuart(C, '+')
                    putfuart(C, '=')
                    putfuart(C, 'N')
                    putfuart(C, 32)
                    putfuart(X, x)
                    putfuart(C, '+')
                    putfuart(X, __NN)
                    putfuart(C, '=')
                    putfuart(X, registers[_X__])
                }
            } else if (N___ == $8000) {
                if (___N == 0) {
                    registers[_X__] = y;
                    if (LOG == 1) {
                        putfuart(C, 'V')
                        putfuart(X, _X__)
                        putfuart(C, '=')
                        putfuart(C, 'V')
                        putfuart(X, __Y_)
                        putfuart(C, 32)
                        putfuart(C, '=')
                        putfuart(X, y)
                    }
                } else if (___N == 1) {
                    registers[_X__] = x | y;
                    if (LOG == 1) {
                        putfuart(C, 'V')
                        putfuart(X, _X__)
                        putfuart(C, '|')
                        putfuart(C, '=')
                        putfuart(C, 'V')
                        putfuart(X, __Y_)
                        putfuart(C, 32)
                        putfuart(X, x)
                        putfuart(C, '|')
                        putfuart(C, '=')
                        putfuart(X, y)
                        putfuart(C, '=')
                        putfuart(X, registers[_X__])
                    }
                } else if (___N == 2) {
                    registers[_X__] = x & y;
                    if (LOG == 1) {
                        putfuart(C, 'V')

                        putfuart(X, _X__)
                        putfuart(C, '&')
                        putfuart(C, '=')
                        putfuart(C, 'V')
                        putfuart(X, __Y_)
                        putfuart(C, 32)
                        putfuart(X, x)
                        putfuart(C, '&')
                        putfuart(C, '=')
                        putfuart(X, y)
                        putfuart(C, '=')
                        putfuart(X, registers[_X__])
                    }
                } else if (___N == 3) {
                    registers[_X__] = x ^ y;
                } else if (___N == 4) {
                    //AddXPlusYCarry
                    short result = x + y;
                    registers[_X__] = result;
                    if (LOG == 1) {
                        putfuart(C, 'V')
                        putfuart(X, _X__)
                        putfuart(C, '+')
                        putfuart(C, '=')
                        putfuart(C, 'V')
                        putfuart(X, __Y_)
                        putfuart(C, 32)
                        putfuart(X, x)
                        putfuart(C, '+')
                        putfuart(X, y)
                        putfuart(C, '=')
                        putfuart(X, result)
                        putfuart(C, 32)
                        putfuart(C, 'C')
                    }
                    if (result > $ff) {
                        registers[15] = 1;
                    } else {
                        registers[15] = 0;
                    }
                    putfuart(X, registers[15])

                } else if (___N == 5) {
                    // XEqXMinusY
                    if (x < y) {
                        // active low
                        registers[15] = 0;
                    } else {
                        registers[15] = 1;
                    }
                    registers[_X__] = x - y;
                } else if (___N == 6) {
                    // X = X >> 1
                    if ((x & 1) != 0) {
                        registers[15] = 1;
                    } else {
                        registers[15] = 0;
                    }
                    registers[_X__] = x >> 1;
                } else if (___N == 7) {
                    // X = Y - X with carry
                    if (x > y) {
                        // active low
                        registers[15] = 0;
                    } else {
                        registers[15] = 1;
                    }
                    registers[_X__] = y - x;

                } else if (___N == $e) {
                    // X = X << 1
                    if ((x & % 10000000) != 0) {
                        registers[15] = 1;
                    } else {
                        registers[15] = 0;
                    }
                    registers[_X__] = x << 1;

                    if (LOG == 1) {
                        putfuart(C, 'V')
                        putfuart(X, _X__)
                        putfuart(C, '<')
                        putfuart(C, '<')
                        putfuart(C, '1')
                        putfuart(C, 32)
                        putfuart(C, '=')
                        putfuart(X, registers[_X__])
                    }
                } else {
                    // not impl 
                    halt(opcode, 2)
                }
            } else if (N___ == $9000) {
                // ADDED VIA test_opcode.ch8
                if (___N == 0) {
                    // skipIfXNeY(opS, _X__, __Y_)
                    if (x != y) {
                        pc = pc + 2;
                    }
                } else {
                    // not impl F0xx
                    halt(opcode, 3)
                }
            } else if (N___ == $A000) { // DONE
                // set index
                index = _NNN;

                if (LOG == 1) {
                    putfuart(C, 'I')
                    putfuart(C, '=')
                    putfuart(X, index >> 8)
                    putfuart(X, index)
                }
            } else if (N___ == $B000) { // DONE
                // In the original COSMAC VIP interpreter, this instruction jumped to the address NNN plus the value in the register V0
                short v0 = registers[0];
                short jumpAddress = _NNN + v0; 

                if (LOG == 1) {
                    putfuart(C, 'J')
                    putfuart(C, 'M')
                    putfuart(C, 'P')
                    putfuart(C, '=')
                    putfuart(X, jumpAddress >> 8)
                    putfuart(X, jumpAddress)
                }

                pc = jumpAddress - 2; // -2 because we inc at the bottom of the loop
                
            } else if (N___ == $C000) { // DONE
                // http://devernay.free.fr/hacks/chip8/C8TECH10.HTML
                // The interpreter generates a random number from 0 to 255, which is then ANDed with the value kk. 
                // The results are stored in Vx. See instruction 8xy2 for more information on AND.

                // Vx = Random AND __NN

                short rand = random();

                registers[_X__] = rand & __NN;

                if (LOG == 1) {
                    putfuart(C, 'V')
                    putfuart(X, _X__)
                    putfuart(C, '=')
                    putfuart(C, 'R')
                    putfuart(C, 'N')
                    putfuart(C, 'D')
                    putfuart(C, '&')
                    putfuart(C, 'N')
                    putfuart(C, 32)
                    putfuart(X, rand)
                    putfuart(C, '&')
                    putfuart(X, __NN)
                    putfuart(C, '=')
                    putfuart(X, registers[_X__])
                }
            } else if (N___ == $D000) {
                // draw glyph identified by Index reg at position X/Y with height N
// as per https://tobiasvl.github.io/blog/write-a-chip-8-emulator/#dxyn-display
// TODO - NEED TO MAINTAIN A SCREEN BUFF     60x40=2.5k

                /*
                if (hackCount == 0) {
                    registers[0] = $25;
                    hackCount = hackCount + 1;
                } else if (hackCount == 1) {
                    registers[1] = $1;
                    hackCount = hackCount + 1;
                }
                */


                if (LOG == 1) {
                    putfuart(C, 'D')
                    putfuart(C, 'R')
                    putfuart(C, 'A')
                    putfuart(C, 'W')
                    putfuart(C, 32)
                    putfuart(C, 'X')
                    putfuart(C, '=')
                    putfuart(C, 'V')
                    putfuart(X, _X__)
                    putfuart(C, '=')
                    putfuart(X, x)
                    putfuart(C, 32)
                    putfuart(C, 'Y')
                    putfuart(C, '=')
                    putfuart(C, 'V')
                    putfuart(X, __Y_)
                    putfuart(C, '=')
                    putfuart(X, y)
                    putfuart(C, 32)
                    putfuart(C, 'N')
                    putfuart(C, '=')
                    putfuart(X, ___N)
                }
                // no collision yet
                registers[15] = 0;

                short xpos = x;
                short ypos = y;
                short ycount = 0;

putfuart(C, '\n')

                // print each row of the glyph
                while (true) { 

/*
        putfuart(C, '\n')
        putfuart(C, '>')
        putfuart(X, ycount)
        putfuart(C, 32)
*/

                    if (ycount >= ___N) {
                        break
                    }

                    short spriteY = ypos + ycount;

                    if (spriteY < SCREEN_HEIGHT) {

                        // work out indexes into pixel memory
                        short rowStart = (ycount + ypos) * 64; // SCREEN_WIDTH;
                        short pixelPos = rowStart + xpos;
                        short rowLimit = rowStart + SCREEN_WIDTH;

                        // load glyph row needing to be displayed - "index" has been set to the memory location to pull the glyph from (typically $50++)
                        short glyphRow = memory[index + ycount];

                        // get all the pixels currently on dsplay - g0 is leftmost on screen
                        short s7 = screen[pixelPos];
                        short s6 = screen[pixelPos + 1];
                        short s5 = screen[pixelPos + 2];
                        short s4 = screen[pixelPos + 3];
                        short s3 = screen[pixelPos + 4];
                        short s2 = screen[pixelPos + 5];
                        short s1 = screen[pixelPos + 6];
                        short s0 = screen[pixelPos + 7];

                        // assemble a line of the 8 pixels into a byte
                        short screenRow = (s7 << 7) | (s6 << 6) | (s5 << 5) | (s4 << 4) | (s3 << 3) | (s2 << 2) | (s1 << 1) | s0;

                        // xor the glyph row with whatever's currently on the screen 
                        short newScreenRow = screenRow ^ glyphRow;
        
                        // record if any pixels were reset
                        short impact = screenRow & glyphRow;

                        // send glyph row to screen to draw it
                        putuart(GOTO_SETX_STATE)
                        putuart(xpos)
                        putuart(GOTO_SETY_STATE)
                        putuart(spriteY)
                        putuart(GOTO_DRAW_BYTE_STATE)
                        putuart(newScreenRow)

/*
        putfuart(X, spriteY)
        putfuart(C, 32)
        putfuart(B, glyphRow)
        putfuart(C, 32)
        putfuart(B, screenRow)
        putfuart(C, 32)
        putfuart(B, newScreenRow)
*/

                        // update local screen copy

                        if (pixelPos < rowLimit) {
                            screen[pixelPos + 0] = (newScreenRow & 128) >> 7;
                            if ((pixelPos + 1) < rowLimit) {
                                screen[pixelPos + 1] = (newScreenRow & 64) >> 6;
                                if ((pixelPos + 2) < rowLimit) {
                                    screen[pixelPos + 2] = (newScreenRow & 32) >> 5;
                                    if ((pixelPos + 3) < rowLimit) {
                                        screen[pixelPos + 3] = (newScreenRow & 16) >> 4;
                                        if ((pixelPos + 4) < rowLimit) {
                                            screen[pixelPos + 4] = (newScreenRow & 8) >> 3;
                                            if ((pixelPos + 5) < rowLimit) {
                                                screen[pixelPos + 5] = (newScreenRow & 4) >> 2;
                                                if ((pixelPos + 6) < rowLimit) {
                                                    screen[pixelPos + 6] = (newScreenRow & 2) >> 1;
                                                    if ((pixelPos + 7) < rowLimit) {
                                                        screen[pixelPos + 7] = (newScreenRow & 1);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        // if any screen bit was cleared then record this "contact" in reg 15
                        if (impact != 0) {
                            registers[15] = 1;
                        }
                    }

                    // next glyph row
                    ycount = ycount + 1;
                }

            } else if (N___ == $E000) {
                if (__NN == $A1) {
                    /*
                    ExA1 - SKNP Vx
                    Skip next instruction if key with the value of Vx is not pressed.
                    Checks the keyboard, and if the key corresponding to the value of Vx is currently in the up position, PC is increased by 2.
                    */
                    // TODO IMPL KEYPRESS IO FROM UART??? GETCHAR?
                    short key = x;

                    if (LOG == 1) {
                        putfuart(C, 'S')
                        putfuart(C, 'K')
                        putfuart(C, 'I')
                        putfuart(C, 'P')
                        putfuart(C, 32)
                        putfuart(C, '!')
                        putfuart(C, 'K')
                        putfuart(C, 'E')
                        putfuart(C, 'Y')
                        putfuart(C, 32)
                        putfuart(X, key)
                        putfuart(C, 32)
                    }

                    if (keyDown != key) {
                        pc = pc + 2;
                    }
                } else if (__NN == $9E) {
                    // skip; if key x is pressed
                    short key = x;

                    if (LOG == 1) {
                        putfuart(C, 'S')
                        putfuart(C, 'K')
                        putfuart(C, 'I')
                        putfuart(C, 'P')
                        putfuart(C, 32)
                        putfuart(C, 'K')
                        putfuart(C, 'E')
                        putfuart(C, 'Y')
                        putfuart(C, 32)
                        putfuart(X, key)
                        putfuart(C, 32)
                    }

                    if (keyDown == key) {
                        pc = pc + 2;
                    }

                } else {
                    // not impl F0xx
                    halt(opcode, 4)
                }


            } else if (N___ == $F000) {
                if (__NN == $07) {
                    // get delay timer / sleep
                    // TODO WORK OUT HOW MANY CYCLES FOR 60 Hz
                    // http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Fx07
                    DT = readport(Timer1);
                    registers[_X__] = DT;

                    if (LOG == 1) {
                        putfuart(C, 'V')
                        putfuart(X, _X__)
                        putfuart(C, '=')
                        putfuart(C, 'D')
                        putfuart(C, 'T')
                        putfuart(C, '=')
                        putfuart(X, DT)
                    }
                } else if (__NN == $15) {
                    // set delay timer / sleep
                    // TODO WORK OUT HOW MANY CYCLES FOR 60 Hz
                    // http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Fx15
                    DT = registers[_X__];
                    writeport(Timer1, DT)

                    if (LOG == 1) {
                        putfuart(C, 'D')
                        putfuart(C, 'T')
                        putfuart(C, '=')
                        putfuart(C, 'V')
                        putfuart(X, _X__)
                        putfuart(C, '=')
                        putfuart(X, DT)
                    }
                } else if (__NN == $18) {
                    // SET SOUND TIMER
                    // TODO WORK OUT HOW MANY CYCLES FOR 60 Hz
                    // http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#Fx18
                    short ST = registers[_X__];

                } else if (__NN == $1E) {
                    // INDEX += REG[X]
                    // set carry if index exceeds mem size of 4096
                    short oldI = index;
                    index = index + x;
                    if (index > 4095) {
                        registers[15] = 1;
                    } else {
                        registers[15] = 0;
                    }
                    if (LOG == 1) {
                        putfuart(C, 'I')
                        putfuart(C, '+')
                        putfuart(C, '=')
                        putfuart(C, 'V')
                        putfuart(X, _X__)
                        putfuart(C, 32)
                        putfuart(X, oldI >> 8)
                        putfuart(X, oldI)
                        putfuart(C, '+')
                        putfuart(X, x)
                        putfuart(C, '=')
                        putfuart(X, index >> 8)
                        putfuart(X, index)
                        putfuart(C, 32)
                        putfuart(C, 'C')
                        putfuart(X, registers[15])
                    }
                } else if (__NN == $29) {
                    short ch = registers[_X__];
                    short offset = ch * FontCharWidth;

                    short locn = FontMemAddress + offset;
                    index = locn;

                    if (LOG == 1) {
                        putfuart(C, 'S')
                        putfuart(C, 'P')
                        putfuart(C, 'R')
                        putfuart(C, 'I')
                        putfuart(C, 'T')
                        putfuart(C, 'E')
                        putfuart(C, 32)
                        putfuart(X, index >> 8)
                        putfuart(X, index)
                    }
                } else if (__NN == $33) {
                    // BCD conversion
                    short i100 = x / 100;
                    short xDiv10 = x / 10;
                    short i10 = xDiv10 - (10 * i100);
                    short i1 = x - (10 * xDiv10);

                    memory[index] = i100;
                    memory[index + 1] = i10;
                    memory[index + 2] = i1;

                    if (LOG == 1) {
                        putfuart(C, 'B')
                        putfuart(C, 'C')
                        putfuart(C, 'D')
                        putfuart(C, 32)
                        putfuart(X, x)
                    }
                } else if (__NN == $55) {
                    if (LOG == 1) {
                        putfuart(C, 'P')
                        putfuart(C, 'U')
                        putfuart(C, 'S')
                        putfuart(C, 'H')
                        putfuart(C, 32)
                        putfuart(X, _X__)
                    }
                    short i = 0;
                    while (true) {
                        memory[index + i] = registers[i];

                        i = i + 1;
                        if (i > _X__) {
                            break
                        }
                    }
                    // NB THERE IS AN OPTIONAL LEGACY STEP HERE THAT SOME PROGS MIGHT RELY ON
                    //       index = if (LoadStoreBehaviour == Legacy) (st.index + xReg.ubyte + 1) else st.index
                } else if (__NN == $65) {
                    if (LOG == 1) {
                        putfuart(C, 'P')
                        putfuart(C, 'O')
                        putfuart(C, 'P')
                        putfuart(C, 32)
                        putfuart(X, _X__)
                    }

                    short i = 0;
                    while (true) {
                        registers[i] = memory[index + i];

                        i = i + 1;
                        if (i > _X__) {
                            break
                        }
                    }
                    // NB THERE IS AN OPTIONAL LEGACY STEP HERE THAT SOME PROGS MIGHT RELY ON
                    //       index = if (LoadStoreBehaviour == Legacy) (st.index + xReg.ubyte + 1) else st.index

//              Ambibuous as there are different impls of these op codes particularly Fx75
//              FX75: As in SUPER-CHIP, store V0..VX in RPL user flags, but X is not limited to 7
//              FX85: As in SUPER-CHIP, read V0..VX from RPL user flags, but X is not limited to 7
//              https://chip-8.github.io/extensions/   CHIP8 extended = output V[X] to hex display
                } else if (__NN == $75) {
                    // implemented the schip variant
                    if (LOG == 1) {
                        putfuart(C, 'S')
                        putfuart(C, 'T')
                        putfuart(C, 'R')
                        putfuart(C, 32)
                        putfuart(X, _X__)
                    }

                    short i = 0;
                    while (i <= _X__) {
                        rplUserFlags[i] = registers[i];
                        i = i + 1;
                    }

                } else if (__NN == $85) {
                    if (LOG == 1) {
                        putfuart(C, 'L')
                        putfuart(C, 'D')
                        putfuart(C, 'R')
                        putfuart(C, 32)
                        putfuart(X, _X__)
                    }

                    short i = 0;
                    while (i <= _X__) {
                        registers[i] = rplUserFlags[i];
                        i = i + 1;
                    }

                } else {
                    // not impl
                    halt(opcode, 5)
                }
            } else {
                // not impl top level
                halt(opcode, 6)
            }

            putfuart(C, '\n')

            pc = pc + 2;
        }

    }
}
