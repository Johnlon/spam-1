program {
    
    fun main() {
        uint16 FONT_ADDR = $50;
        uint16 PC_INIT=$200;

        uint16 GOTO_INIT_STATE = 0;
        uint16 GOTO_SETX_STATE = 1;  // switch state
        uint16 GOTO_SETY_STATE = 2;  // switch state
        uint16 GOTO_DRAW_PIXEL_STATE = 3; // switch state
        uint16 GOTO_DRAW_BYTE_STATE = 4; // switch state
        uint16 DO_CLEAR = 10;
        uint16 DO_UP = 11;
        uint16 DO_DOWN = 12;
        uint16 DO_LEFT = 13;
        uint16 DO_RIGHT = 14;
        uint16 DO_ORIGIN = 15;
        uint16 DO_CENTRE = 16;

        // 16 x 8 bits
        var registers = [ 16: [] ];

        // 16 x 16 bits
        var stack = [ 32: [] ];

        uint16 FontMemAddress = $50;
        uint16 FontCharWidth = 5;

        var memory = [
            // fonts : 10 rows = 10 digits, each row of 5 bytes defines the 5 rows of 8 pixels wide
            $50 : [
                $F0 $90 $90 $90 $F0       
                $20 $60 $20 $20 $70      
                $F0 $10 $F0 $80 $F0     
                $F0 $10 $F0 $10 $F0    
                $90 $90 $F0 $10 $10   
                $F0 $80 $F0 $10 $F0  
                $F0 $80 $F0 $90 $F0       
                $F0 $10 $20 $40 $40      
                $F0 $90 $F0 $90 $F0     
                $F0 $90 $F0 $10 $F0    
                $F0 $90 $F0 $90 $90   
                $E0 $90 $E0 $90 $E0  
                $F0 $80 $80 $80 $F0      
                $E0 $90 $90 $90 $E0     
                $F0 $80 $F0 $80 $F0    
                $F0 $80 $F0 $80 $80   
            ]

            // program
            // $200 : [file("/home/john/OneDrive/github/johnlon/chip-8/src/main/resources/chip8/roms/IBM_Logo.ch8")]
            $200 : [file(systemProp("CHIP8_FILENAME"))]

            // memory limit - put a zero explicitly at posn - this has same effect as as "$FFF=[]"
            $0FFF: [0] // 4k
        ];

        uint16 pc = PC_INIT;
        uint16 index = 0;
        uint16 stackPtr  = 0;

        // reset by sending this twice
        putchar(GOTO_INIT_STATE)
        putchar(GOTO_INIT_STATE)

        while (true)  {

            uint16 opcodehi = memory[pc];
            uint16 opcodelo = memory[pc+1];

            uint16 opcode = (opcodehi << 8) + opcodelo;

            uint16 N___ = opcode & $f000;
            uint16 _NNN = opcode & $0fff;
            uint16 _X__ = opcodehi & $0f;
            uint16 __Y_ = opcodelo >> 4;
            uint16 __NN = opcodelo;
            uint16 ___N = opcodelo & $0f;

            uint16 x = registers[_X__];
            uint16 y = registers[__Y_];

            if (opcode == $00e0) {
                // draw
                putchar(DO_CLEAR)
            }
            else if (opcode == $00ee) { // DONE
               // return by pulling address off stack
                stackPtr = stackPtr - 1;
                uint16 addrLo = stack[stackPtr];
                stackPtr = stackPtr - 1;
                uint16 addrHi = stack[stackPtr];
                pc = (addrHi << 8) + addrLo;
               //putchar('R')
            }
            else if (opcodehi == $00) {
               // obsolete machine jump
               //putchar('!')
            } 
            else if (N___ == $1000) {  // DONE
               // jump to nnn
               //putchar('J')
               pc = _NNN - 2; // subtract 2 as there is an auto increment at end of loop
               putchar(GOTO_INIT_STATE)
            }
            else if (N___ == $3000) {  // DONE
               // skip if X eq N

               if (registers[_X__] == __NN) {
                pc = pc + 2;
               }

               putchar(GOTO_INIT_STATE)
            }
            else if (N___ == $4000) {  // DONE
               // skip if X ne N

               if (registers[_X__] != __NN) {
                pc = pc + 2;
               }

               putchar(GOTO_INIT_STATE)
            }
            else if (N___ == $5000) {  // DONE
               // skip if X eq Y
               if (___N != 0) {
                halt(opcode)
               }
               if (registers[_X__] == registers[__Y_]) {
                pc = pc + 2;
               }

               putchar(GOTO_INIT_STATE)
            }
            else if (N___ == $6000) { // DONE
               registers[_X__] = __NN;
            } 
            else if (N___ == $7000) { // DONE
               registers[_X__] = registers[_X__] + __NN;
            }
            else if (N___ == $8000) {
               if (___N == 1) {
                    registers[_X__] = x | y;
               } else {
                   if (___N == 2) {
                    registers[_X__] = x & y;
                   }
                   else {
                       if (___N == 3) {
                           registers[_X__] = x ^ y;
                       } else {
                           if (___N == 5) {

                             // XEqXMinusY
                             if (x < y) {
                                registers[15] = 0;
                             } else {
                                registers[15] = 1;
                             }
                             registers[_X__] = x - y;

                           } else {
                               if (___N == 6) {
                                    if ((x & 1) != 0) {
                                        registers[15] = 1;
                                    } else {
                                        registers[15] = 0;
                                    }
                                    registers[_X__] = x >> 1;
                               } else {
                                   if (___N == 7) {
                                     // XEqYMinusX
                                     if (y < x) {
                                        registers[15] = 0;
                                     } else {
                                        registers[15] = 1;
                                     }
                                     registers[_X__] = y - x;

                                   } else {
                                     if (___N == $e) {
                                        if ((x & %10000000) != 0) {
                                            registers[15] = 1;
                                        } else {
                                            registers[15] = 0;
                                        }
                                        registers[_X__] = x << 1;
                                     } else {
                                        halt(opcode)
                                     }
                                   }
                               }
                           }
                       }
                   }
               }
            }
            else if (N___ == $A000) { // DONE
               // set index
               //putchar('I')
               index = _NNN;
            }
            else if (N___ == $D000) {
               // draw glyph identified by Index reg at position X/Y with height N

                uint16 xpos = registers[_X__];
                uint16 ypos = registers[__Y_];

                uint16 ycount = 0;

                while (true) { // TODO - make while take an expr

                   if (ycount >= ___N) {
                     break
                   }

                   putchar(GOTO_SETX_STATE)
                   putchar(xpos)

                   putchar(GOTO_SETY_STATE)
                   putchar(ypos + ycount)

                   uint16 glyphRow = memory[index+ycount];
                   putchar(GOTO_DRAW_BYTE_STATE)
                   putchar(glyphRow)

                   ycount =  ycount + 1;
                }
            }
            else if (N___ == $F000) {
                if (__NN == $29) {
                    uint16 ch = registers[_X__];
                    uint16 offset = 0;

                    // !!!!! NEED TO IMPL MULTIPLY => LOOP FOR NOW
                    //uint16 offset = ch * FontCharWidth;
                    while (ch > 0 ) {
                        offset = offset + FontCharWidth;
                        ch = ch - 1;
                    }

                    uint16 locn = FontMemAddress + offset;
                    index = locn;
                } else if (__NN == $55) {
//StoreRegisters(opS, _X__) <<<< TODO
                } else {
                    halt(opcode)
                }
            } else {
                halt(opcode)
            }

            pc = pc + 2;
        }
        

       // uint16 pc_lo= >:PC_INIT

        //uint16 pc_hi= <:PC_INIT


    }
}
