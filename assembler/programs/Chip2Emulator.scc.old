program {
    fun main() {
        uint16 PC_INIT=$200;
        uint16 STATE_NONE=0;
        uint16 DO_NONE=0;
        uint16 DO_CLEAR='C';

        var prog = file("/home/john/OneDrive/github/johnlon/chip-8/src/main/resources/chip8/roms/IBM_Logo.ch8");
        var registers = "000000000000000";

        uint16 pc = 0;

        while (pc < 200)  {
            
            uint16 opcodehi = prog[pc];
            uint16 opcodelo = prog[pc+1];

            uint16 opcode = (opcodehi << 8) + opcodelo;

            uint16 N___ = opcode & $f000;
            uint16 _NNN = opcode & $0fff;
            uint16 _X__ = opcodehi & $0f;
            uint16 __Y_ = opcodelo >> 4;
            uint16 __NN = opcodelo;
            uint16 ___N = opcodelo & $0f;


            if (opcode == $00e0) {
                // draw
                putchar('C')
            } else if (opcode == $00ee) {
               // return
               putchar('R')
            } else if (opcodehi == $00) {
               // obsolete machine jump
               putchar('!')
            } else if (N___ == $1000) { // DONE
               // jump to nnn
               putchar('J')
               pc = (_NNN - 2) - PC_INIT;
            } else if (N___ == $6000) { // DONE
               // set x = nn
               putchar('S')
               putchar(_X__)
               putchar(__NN)
               registers[_X__] = __NN;
            } else if (N___ == $7000) {
               // add x = x + nn
               putchar('A')
               putchar(_X__)
               putchar(__NN)
               registers[_X__] = registers[_X__] + __NN;
            } else if (N___ == $A000) {
               // set index
               putchar('I')
            } else if (N___ == $D000) {
               // set x = nn
               putchar('D')
               putchar(_X__)
               putchar(__Y_)
               putchar(___N)
            } else {
               putchar('X')
               putchar(opcodehi)
               putchar(opcodelo)
            }
            


            pc = pc + 2;
        }
        

       // uint16 pc_lo= >:PC_INIT

        //uint16 pc_hi= <:PC_INIT

       // uint16 inst_hi = prog[:

    }
}
