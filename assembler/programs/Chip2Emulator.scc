program {
    fun main() {
        uint16 FONT_ADDR = $50;
        uint16 PC_INIT=$200;

        uint16 STATE_NONE=0;
        uint16 DO_NONE=0;
        uint16 DO_CLEAR='C';

        // 16 x 8 bits
        var registers = [ 16: [] ];

        // 16 x 16 bits
        var stack = [ 32: [] ];

        var memory = [
            // fonts
            $50 : [
                $F0 $90 $90 $90 $F0       
                $20 $60 $20 $20 $70      
                $F0 $10 $F0 $80 $F0     
                $F0 $10 $F0 $10 $F0    
                $90 $90 $F0 $10 $10   
                $F0 $80 $F0 $10 $F0  
                $F0 $80 $F0 $90 $F0       
                $F0 $10 $20 $40 $40      
                $F0 $90 $F0 $90 $F0     
                $F0 $90 $F0 $10 $F0    
                $F0 $90 $F0 $90 $90   
                $E0 $90 $E0 $90 $E0  
                $F0 $80 $80 $80 $F0      
                $E0 $90 $90 $90 $E0     
                $F0 $80 $F0 $80 $F0    
                $F0 $80 $F0 $80 $80   
            ]

            // program
            $200 : [file("/home/john/OneDrive/github/johnlon/chip-8/src/main/resources/chip8/roms/IBM_Logo.ch8")]

            // memory limit - put a zero explicitely at posn - this has same effect as as "$4096=[]"
            $4095: [0]
        ];

        uint16 pc = PC_INIT;
        uint16 index = 0;


        while (true)  {
            
            uint16 opcodehi = memory[pc];
            uint16 opcodelo = memory[pc+1];

            uint16 opcode = (opcodehi << 8) + opcodelo;

            uint16 N___ = opcode & $f000;
            uint16 _NNN = opcode & $0fff;
            uint16 _X__ = opcodehi & $0f;
            uint16 __Y_ = opcodelo >> 4;
            uint16 __NN = opcodelo;
            uint16 ___N = opcodelo & $0f;


            if (opcode == $00e0) {
                // draw
                putchar(DO_CLEAR)
            } else if (opcode == $00ee) {
               // return by pulling address off stack
               putchar('R')
            } else if (opcodehi == $00) {
               // obsolete machine jump
               putchar('!')
            } 
            else if (N___ == $1000) { 
               // jump to nnn
               putchar('J')
               pc = _NNN - 2;
            } 
            else if (N___ == $6000) { // DONE
               // set x = nn
               putchar('S')
               putchar(_X__)
               putchar(__NN)
               registers[_X__] = __NN;
            } 
            else if (N___ == $7000) { // DONE
               // add x = x + nn
               putchar('A')
               putchar(_X__)
               putchar(__NN)
               registers[_X__] = registers[_X__] + __NN; 
            } 
            else if (N___ == $A000) { // DONE
               // set index
               putchar('I')
               index = _NNN;
            } 
            if (N___ == $D000) {
               // draw glyph indentified by Index reg at position X/Y with height N
               putchar('D')
               putchar(_X__)
               putchar(__Y_)
               putchar(___N)
            } 
           /* else {
               putchar('X')
               putchar(opcodehi)
               putchar(opcodelo)
            }
*/
            

            pc = pc + 2;
        }
        

       // uint16 pc_lo= >:PC_INIT

        //uint16 pc_hi= <:PC_INIT


    }
}
