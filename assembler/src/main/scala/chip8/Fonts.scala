package chip8

object Fonts {
  // http://www.multigesture.net/articles/how-to-write-an-emulator-chip-8-interpreter/
  val FontMemAddress = U12(0x50)

  val FontCharWidth = 5

  def installFonts(state: State): State = {
    var memory = state.memory
    hexFonts.zipWithIndex.foreach {
      case (f, i) =>
        val fontLocn = FontMemAddress + i
        memory = memory.set(fontLocn.toInt,  f)
    }
    state.copy(memory = memory)
  }

  def fontCharLocation(n: Int): U12 = {
    FontMemAddress + (n * FontCharWidth)
  }

  def hexFonts: Seq[U8] = {
    List(
      0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
      0x20, 0x60, 0x20, 0x20, 0x70, // 1
      0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
      0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
      0x90, 0x90, 0xF0, 0x10, 0x10, // 4
      0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
      0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
      0xF0, 0x10, 0x20, 0x40, 0x40, // 7
      0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
      0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
      0xF0, 0x90, 0xF0, 0x90, 0x90, // A
      0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
      0xF0, 0x80, 0x80, 0x80, 0xF0, // C
      0xE0, 0x90, 0x90, 0x90, 0xE0, // D
      0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
      0xF0, 0x80, 0xF0, 0x80, 0x80 // F
    ).map(x => U8.valueOf(x))
  }
}